/*
 * main.cpp - The main interface
 * Copyright (C) 2025 Jason Christian
 *
 * This file is part of browniefudge.
 *
 * browniefudge is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * browniefudge is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <filesystem>
#include <fstream>
#include <iterator>
#include <string>
#include <vector>

#include "compiler.hpp"
#include "interpreter.hpp"
#include "logging.hpp"
#include "preference.hpp"

namespace fs = std::filesystem;

int main(int argc, char *argv[])
{
	std::vector<intermediate> interpreted;
	std::string output = "out.c";
	fs::path src_path;

	Preference pref("browniefudge");
	std::vector<std::string> args;
	args.reserve(argc);
	for (int i = 0; i < argc; ++i)
		args.emplace_back(argv[i] ? argv[i] : "");

	if (argc > 1)
	{
		std::string text =
			"browniefudge 1.0.0\n"
			"Copyright (C) 2025 Jason Christian\n"
			"License GPLv3+: GNU GPL version 3 or later "
			"<https://www.gnu.org/licenses/gpl.html>\n"
			"This is free software:"
			"you are free to change and redistribute it.\n"
			"There is NO WARRANTY, to the extent permitted by law.\n"
			"Source code available at: "
			"https://github.com/SecretRoomSR/browniefudge\n";
		std::string help_text =
			"Usage: browniefudge [OPTION] [FILE]\n"
			"       brudge       [OPTION] [FILE]\n"
			"Options:\n"
			"  --help, -h                 Shows this text\n"
			"  --version, -v              Shows the current version of "
			"browniefudge\n"
			"  --set-compiler=COMPILER    Sets the default compiler to "
			"COMPILER\n"
			"  --auto                     Automatically compile the generated "
			"C\n"
			"                             code generated by browniefudge "
			"using\n"
			"                             the compiler set by --set-compiler\n"
			"  -o                         Sets the output path\n";

		// unknown options
		std::vector<std::string> known_options = {
			"--auto", "--set-compiler", "-v", "--version",
			"-h",	  "--help",			"-o"};
		for (std::string arg : args)
		{
			if (arg[0] == '-' &&
				std::find(known_options.begin(), known_options.end(), arg) ==
					known_options.end())
			{
				std::printf(
					"Unknown option %s\nFor help, type 'browniefudge --help'\n",
					arg.c_str());
				return 0;
			}
		}

		// --version and --help
		if (std::find(args.begin(), args.end(), "-v") != args.end() ||
			std::find(args.begin(), args.end(), "--version") != args.end())
		{
			std::printf("%s", text.c_str());
			return 0;
		}
		if (std::find(args.begin(), args.end(), "-h") != args.end() ||
			std::find(args.begin(), args.end(), "--help") != args.end())
		{
			std::printf("%s\n%s", text.c_str(), help_text.c_str());
			return 0;
		}

		// --auto
		bool is_auto =
			std::find(args.begin(), args.end(), "--auto") != args.end();

		// --set-compiler
		auto pos = std::find(args.begin(), args.end(), "--set-compiler");
		if (pos != args.end())
		{
			auto next = std::next(pos);
			if (next != args.end())
			{
				std::string compiler = *next;
				if (!pref.set(compiler))
				{
					logerror(1, "Failed to save preference");
				}
			}
			else
			{
				logerror(1, "--set-compiler given but no value provided");
			}
			return 0;
		}

		// -o
		pos = std::find(args.begin(), args.end(), "-o");
		if (pos != args.end())
		{
			auto next = std::next(pos);
			if (next != args.end())
			{
				output = *next;
			}
			else
			{
				logerror(1, "-o given but no value provided");
			}
		}
		else
		{
#if _WIN32
			output = "a.exe";
#else
			output = "a"
#endif
		}

		// get source code path
		for (int i = 1; i < args.size(); ++i)
		{
			std::string arg = args[i];
			std::string prev = args[i - 1];

			// skip if arg has dash or previous does not have a dash
			if (arg[0] == '-' || prev[0] == '-')
				continue;

			src_path = fs::absolute(arg);
			interpreted = interpret(src_path);
			break;
		}

		// convert intermediate to c code
		std::string coutput(output);
		if (is_auto)
		{
			coutput = "out.c";
		}

		std::string converted = compile(interpreted);
		std::ofstream ofs(coutput);
		ofs << converted;
		ofs.close();

		loginfo("Compiled to " + coutput);

		// --auto
		if (is_auto)
		{
			loginfo("--auto given, compiling " + coutput + " to " + output +
					"...");
			std::string compiler = pref.get("gcc");
			int result =
				system((compiler + " -o " + output + " " + coutput).c_str());
			if (result != 0)
			{
				logerror(
					1, compiler + " returned with error code " +
						   std::to_string(result) +
						   "! This is most likely an error with browniefudge, "
						   "if manually compiling the C code works, then it's "
						   "most likely a problem with your C compiler.");
			}

			loginfo("Deleting " + coutput + "...");
			try
			{
				if (fs::remove(coutput))
				{
					loginfo("File deleted successfully.");
				}
				else
				{
					loginfo("File does not exist.");
				}
			}
			catch (const fs::filesystem_error &e)
			{
				logwarning("Error deleting file: " + std::string(e.what()));
			}
		}
		loginfo(src_path.generic_string() + " compiled successfully!");

		return 0;
	}

	std::printf("For help, type 'browniefudge --help'\n");

	return 0;
}
