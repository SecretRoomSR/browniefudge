/*
 * main.cpp - The main interface
 * Copyright (C) 2025 Jason Christian
 *
 * This file is part of browniefudge.
 *
 * browniefudge is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * browniefudge is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <https://www.gnu.org/licenses/>.
 */

#include <algorithm>
#include <cstdio>
#include <cstdlib>
#include <filesystem>
#include <iterator>
#include <stdio.h>
#include <string>
#include <vector>

#include "interpreter.hpp"
#include "preference.hpp"

namespace fs = std::filesystem;

void loginfo(const std::string &message, char *argv[])
{
	std::printf("[%s] <INFO> %s\n", argv[0], message.c_str());
}
void logwarning(const std::string &message, char *argv[])
{
	std::printf("[%s] <WARN> %s\n", argv[0], message.c_str());
}
void logerror(int code, const std::string &message, char *argv[])
{
	std::fprintf(stderr, "[%s] <ERR> %s\n", argv[0], message.c_str());
	exit(code);
}

int main(int argc, char *argv[])
{
	Preference pref("browniefudge");
	std::vector<std::string> args;
	args.reserve(argc);
	for (int i = 0; i < argc; ++i)
		args.emplace_back(argv[i] ? argv[i] : "");

	if (argc > 1)
	{
		std::string text =
			"browniefudge 1.0.0\n"
			"Copyright (C) 2025 Jason Christian\n"
			"License GPLv3+: GNU GPL version 3 or later "
			"<https://www.gnu.org/licenses/gpl.html>\n"
			"This is free software:"
			"you are free to change and redistribute it.\n"
			"There is NO WARRANTY, to the extent permitted by law.\n"
			"Source code available at: "
			"https://github.com/SecretRoomSR/browniefudge\n";
		std::string helpText =
			"Usage: browniefudge [OPTION] [FILE]\n"
			"Options:\n"
			"  --set-compiler=COMPILER    Sets the default compiler to COMPILER\n"
			"  --auto                     Automatically compile the generated C\n"
			"                             code generated by browniefudge using\n"
			"                             the compiler set by --set-compiler\n";
		
		// --version and --help
		if (std::find(args.begin(), args.end(), "-v") != args.end() ||
			std::find(args.begin(), args.end(), "--version") != args.end())
		{
			std::printf("%s", text.c_str());
		}
		if (std::find(args.begin(), args.end(), "-h") != args.end() ||
			std::find(args.begin(), args.end(), "--help") != args.end())
		{
			std::printf("%s\n%s", text.c_str(), helpText.c_str());
		}

		// set compiler
		auto pos = std::find(args.begin(), args.end(), "--set-compiler");
		if (pos != args.end())
		{
			auto next = std::next(pos);
			if (next != args.end())
			{
				std::string compiler = *next;
				if (!pref.set(compiler))
				{
					logerror(1, "Failed to save preference", argv);
				}
			}
			else
			{
				logerror(1, "--set-compiler given but no value provided", argv);
			}
		}

		// get source code path
		for (int i = 0; i < args.size(); ++i)
		{
			std::string arg = args[i];

			// skip if arg has -
			if (std::find(arg.begin(), arg.end(), '-') == arg.end())
				continue;

			// if the argument before is not an option
			if (i > 0 && std::find(args[i - 1].begin(), args[i - 1].end(),
								   '-') != arg.end())
			{
				fs::path srcPath = fs::absolute(arg);
			}
		}
	}

	// std::string current = pref.get("clang++");

	return 0;
}
